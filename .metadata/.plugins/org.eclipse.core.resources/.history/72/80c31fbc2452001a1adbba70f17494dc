package com.boot.controller;

import java.util.List;
import java.util.Map;

import javax.websocket.server.PathParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.boot.model.City;
import com.boot.model.Person;
import com.boot.services.DataService;
import com.boot.services.PersonService;

@RestController
@RequestMapping("/api")
public class APIController {
	@Autowired 
	DataService dService;
	
	@Autowired 
	PersonService pService;
	
	@AutoWired
	NationRepository nrepo;
	
	@RequestMapping("/greet")
	public String hello() {
		return "Hello!! springboot!!!";
	}

	@RequestMapping("/teams")public Map<String,String[]> teams(){
		return dService.names();
	}
		@RequestMapping("/allcities")public List<City> getCities(){
			return dService.getCity();
	}
		@RequestMapping("/cities/{pattern}")
		public List<City> getCities(@PathVariable("pattern")String pattern){
			return dService.getCities(pattern);
	}
		@RequestMapping("/cities")
		public List<City> getCities2(@PathParam("pattern")String pattern){
			return dService.getCities(pattern);
	}
		@RequestMapping(value = "/person", method = {RequestMethod.POST,RequestMethod.PUT})
		public ResponseEntity<Person>addPerson(@RequestBody Person person)
		{
			try {
				pService.putPerson(person);
				return new ResponseEntity<Person>(person, HttpStatus.OK);
			}
			catch(Exception e) {
				return new ResponseEntity<Person>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		
		@DeleteMapping("/person")
		public ResponseEntity<Person>deletePerson(@RequestBody Person person)
		{
			try {
				pService.removePerson(person);
				return new ResponseEntity<Person>(person, HttpStatus.OK);
			}
			catch(Exception e) {
				return new ResponseEntity<Person>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		
		@DeleteMapping("/person/{ID}")
		public ResponseEntity<Integer>deletePerson(@PathVariable("ID") Integer sno)
		{
			try {
				pService.removePerson(sno);
				return new ResponseEntity<Integer>(sno, HttpStatus.OK);
			}
			catch(Exception e) {
				return new ResponseEntity<Integer>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		
		
	
	
	
}
